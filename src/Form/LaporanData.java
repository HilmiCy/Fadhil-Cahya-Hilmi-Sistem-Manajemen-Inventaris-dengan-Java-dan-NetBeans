/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Form;


import javax.swing.JFrame;
import java.sql.Connection;
import javax.swing.table.DefaultTableModel;
import ClassDatabase.ClassDatabase;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
//import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import java.awt.BorderLayout;
import java.io.File;
import java.util.HashMap;
import java.util.Locale;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import net.sf.jasperreports.web.servlets.ViewerServlet;

/**
 *
 * @author Fadhil Cahya Hilmi
 */
public class LaporanData extends javax.swing.JInternalFrame {

    /**
     * Creates new form LaporanData
     */
    public LaporanData() {
        super("Menu Cetak Laporan |Administrator Fadhil Cahya Hilmi");
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbLaporan = new javax.swing.JComboBox<>();
        tgl_akhir = new com.toedter.calendar.JDateChooser();
        tgl_awal = new com.toedter.calendar.JDateChooser();
        btnPrint = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnCari = new javax.swing.JButton();
        txtCari = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLaporan = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("FORM LAPORAN");

        jLabel2.setText("Tanggal Akhir");

        jLabel3.setText("Pilih Laporan");

        jLabel4.setText("Tanggal Awal");

        cbLaporan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Pilih Laporan --", "Data Pelanggan", "Data Barang", "Data Supplier", "Data Pembelian Barang", "Data Penjualan Barang" }));
        cbLaporan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLaporanActionPerformed(evt);
            }
        });

        btnPrint.setText("Print Laporan");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnCari.setText("Cari");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        tblLaporan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblLaporan);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnCari, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbLaporan, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tgl_awal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tgl_akhir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtCari))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(90, 90, 90))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbLaporan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrint))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4)
                        .addComponent(tgl_awal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnClose))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tgl_akhir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCari)
                    .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(188, 188, 188))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
         int ex = JOptionPane.showConfirmDialog(null, "Want to Exit?", "Are You Sure?", JOptionPane.YES_NO_OPTION);
        if (ex == 0){
            dispose();
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        if (cbLaporan.getSelectedItem().toString().equals("Data Pelanggan")) {
            try {
                String reportPath = "src/Reports/DataPelanggan.jasper";
                Connection c = ClassDatabase.getkoneksi();
                
//                HashMap<String, Object> parameters = new HashMap<>();
                HashMap hash = new HashMap(3);
                hash.put(JRParameter.REPORT_LOCALE, new Locale("id", "ID"));
                File file = new File(reportPath);
                
                JasperReport jasperReport = (JasperReport) JRLoader.loadObjectFromFile(file.getPath());
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hash, c);
                JasperViewer.viewReport(jasperPrint, false);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Can't Open Pelannggan Report");
            }
        }else if (cbLaporan.getSelectedItem().toString().equals("Data Supplier")) {
               try {
                String reportPath = "src/Reports/DataSupplier.jasper";
                Connection c = ClassDatabase.getkoneksi();
                
//                HashMap<String, Object> parameters = new HashMap<>();
                HashMap hash = new HashMap(3);
                hash.put(JRParameter.REPORT_LOCALE, new Locale("id", "ID"));
                File file = new File(reportPath);
                
                JasperReport jasperReport = (JasperReport) JRLoader.loadObjectFromFile(file.getPath());
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hash, c);
                JasperViewer.viewReport(jasperPrint, false);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Can't Open Supplier Report");
            }
        }else if (cbLaporan.getSelectedItem().toString().equals("Data Barang")) {
               try {
                String reportPath = "src/Reports/DataBarang.jasper";
                Connection c = ClassDatabase.getkoneksi();
                
//                HashMap<String, Object> parameters = new HashMap<>();
                HashMap hash = new HashMap(3);
                hash.put(JRParameter.REPORT_LOCALE, new Locale("id", "ID"));
                File file = new File(reportPath);

                
                JasperReport jasperReport = (JasperReport) JRLoader.loadObjectFromFile(file.getPath());
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hash, c);
                JasperViewer.viewReport(jasperPrint, false);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Can't Open Barang Report");
            }
        } else if (cbLaporan.getSelectedItem().toString().equals("Data Pembelian Barang")) {
            java.util.Date tgl_awal = (java.util.Date) this.tgl_awal.getDate();
            java.util.Date tgl_akhir = (java.util.Date) this.tgl_akhir.getDate();
               try {
                String reportPath = "src/Reports/DataPembelian.jasper";
                Connection c = ClassDatabase.getkoneksi();
                HashMap hash = new HashMap(3);

                
                hash.put("tglawal", tgl_awal);
                hash.put("tglakhir", tgl_akhir);
                hash.put(JRParameter.REPORT_LOCALE, new Locale("id", "ID"));
                File file = new File(reportPath);
                
                JasperReport jasperReport = (JasperReport) JRLoader.loadObjectFromFile(file.getPath());
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hash, c);
                JasperViewer.viewReport(jasperPrint, false);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Can't Open Data Pembelian Barang Report");
            }
        }else if (cbLaporan.getSelectedItem().toString().equals("Data Penjualan Barang")) {
            java.util.Date tgl_awal = (java.util.Date) this.tgl_awal.getDate();
            java.util.Date tgl_akhir = (java.util.Date) this.tgl_akhir.getDate();
               try {
                String reportPath = "src/Reports/DataPenjualan.jasper";
                Connection c = ClassDatabase.getkoneksi();
                HashMap hash = new HashMap(3);
                
                hash.put("tglawal", tgl_awal);
                hash.put("tglakhir", tgl_akhir);
                hash.put(JRParameter.REPORT_LOCALE, new Locale("id", "ID"));
                
                File file = new File(reportPath);
                
                JasperReport jasperReport = (JasperReport) JRLoader.loadObjectFromFile(file.getPath());
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hash, c);
                JasperViewer.viewReport(jasperPrint, false);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Can't Open Data Penjualan Barang Report");
            }
        } 
    }//GEN-LAST:event_btnPrintActionPerformed

    private void cbLaporanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLaporanActionPerformed
        if (cbLaporan.getSelectedItem().toString().equals("Data Pelanggan")) {
        DefaultTableModel tbltampil =new DefaultTableModel();
        tbltampil.addColumn("No. Identitas");
        tbltampil.addColumn("Jenis Identitas");
        tbltampil.addColumn("Nama");
        tbltampil.addColumn("Alamat");
        tbltampil.addColumn("Jenis Kelamin");
        tbltampil.addColumn("No. Telp");
        tbltampil.addColumn("Tanggal");
        
         try {
                Connection c = ClassDatabase.getkoneksi();
                Statement s = c.createStatement();
                String sql = "Select * FROM pelanggan";
                  ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {                    
                    tbltampil.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6),
                     rs.getString(7)
                });
                    tblLaporan.setModel(tbltampil);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (cbLaporan.getSelectedItem().toString().equals("Data Barang")) {
        DefaultTableModel tbltampil =new DefaultTableModel();
            tbltampil.addColumn("Kode Barang");
            tbltampil.addColumn("Nama Barang");
            tbltampil.addColumn("Harga Beli");
            tbltampil.addColumn("Harga Jual");
            tbltampil.addColumn("Stok");
            tbltampil.addColumn("Saham");
         try {
                Connection c = ClassDatabase.getkoneksi();
                Statement s = c.createStatement();
                String sql = "Select * FROM master";
                  ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {                    
                    tbltampil.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6)
                });
                    tblLaporan.setModel(tbltampil);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (cbLaporan.getSelectedItem().toString().equals("Data Supplier")) {
        DefaultTableModel tbltampil =new DefaultTableModel();
            tbltampil.addColumn("Kode Supplier");
            tbltampil.addColumn("Nama");
            tbltampil.addColumn("Alamat");
            tbltampil.addColumn("No. Telp");
         try {
                Connection c = ClassDatabase.getkoneksi();
                Statement s = c.createStatement();
                String sql = "Select * FROM supplier";
                  ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {                    
                    tbltampil.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4)
                });
                    tblLaporan.setModel(tbltampil);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (cbLaporan.getSelectedItem().toString().equals("Data Penjualan Barang")) {
        DefaultTableModel tbltampil =new DefaultTableModel();
            tbltampil.addColumn("ID");
            tbltampil.addColumn("Kode Penjualan");
            tbltampil.addColumn("Jumlah Beli");
            tbltampil.addColumn("Total");
            tbltampil.addColumn("Tanggal Penjualan");
            tbltampil.addColumn("Profit");
         try {
                Connection c = ClassDatabase.getkoneksi();
                Statement s = c.createStatement();
                String sql = "Select * FROM penjualan";
                  ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {                    
                    tbltampil.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6)
                });
                    tblLaporan.setModel(tbltampil);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (cbLaporan.getSelectedItem().toString().equals("Data Pembelian Barang")) {
        DefaultTableModel tbltampil =new DefaultTableModel();
        
            tbltampil.addColumn("ID");
            tbltampil.addColumn("No. Pembelian");
            tbltampil.addColumn("Kode Barang");
            tbltampil.addColumn("Jumlah Beli");
            tbltampil.addColumn("Tanggal Beli");
            tbltampil.addColumn("Kode Supplier");
         try {
                Connection c = ClassDatabase.getkoneksi();
                Statement s = c.createStatement();
                String sql = "Select * FROM acc";
                  ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {                    
                    tbltampil.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6)
                });
                    tblLaporan.setModel(tbltampil);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (cbLaporan.getSelectedItem().toString().equals("Data Barang & Penjualan")) {
    DefaultTableModel tbltampil = new DefaultTableModel();
    
    tbltampil.addColumn("ID");
    tbltampil.addColumn("Kode Barang");
    tbltampil.addColumn("Nama Barang");
    tbltampil.addColumn("Jumlah Beli");
    tbltampil.addColumn("Total");
    tbltampil.addColumn("Tanggal Beli");
    tbltampil.addColumn("Profit");
    
    try {
        Connection c = ClassDatabase.getkoneksi();
        Statement s = c.createStatement();
        String sql = "SELECT penjualan.id, master.kode_barang, master.nama, penjualan.qty, penjualan.total, penjualan.tgl_jual, penjualan.profit " +
                     "FROM penjualan " +
                     "INNER JOIN master ON penjualan.kodea = master.kode_barang " +
                     "WHERE penjualan.id LIKE '%" + txtCari.getText() + "%' " +
                     "OR master.kode_barang LIKE '%" + txtCari.getText() + "%'";
        ResultSet rs = s.executeQuery(sql);
        while (rs.next()) {                    
            tbltampil.addRow(new Object[]{
                rs.getString(1),
                rs.getString(2),
                rs.getString(3),
                rs.getString(4),
                rs.getString(5),
                rs.getString(6),
                rs.getString(7)
            });
        }
        tblLaporan.setModel(tbltampil);
    } catch (Exception e) {
        System.out.println(e);
    }
}
        
    }//GEN-LAST:event_cbLaporanActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
        if (cbLaporan.getSelectedItem().toString().equals("Data Pelanggan")) {
        DefaultTableModel tbltampil =new DefaultTableModel();
        tbltampil.addColumn("No. Identitas");
        tbltampil.addColumn("Jenis Identitas");
        tbltampil.addColumn("Nama");
        tbltampil.addColumn("Alamat");
        tbltampil.addColumn("Jenis Kelamin");
        tbltampil.addColumn("No. Telp");
        tbltampil.addColumn("Tanggal");
        
            try {
                Connection c = ClassDatabase.getkoneksi();
                Statement s = c.createStatement();
                String sql = "SELECT * FROM pelanggan WHERE no_identitas LIKE '%" + txtCari.getText() + "%' " +
              "OR j_identitas LIKE '%" + txtCari.getText() + "%' " +
              "OR nama LIKE '%" + txtCari.getText() + "%' " +
              "OR alamat LIKE '%" + txtCari.getText() + "%' " +
              "OR jk LIKE '%" + txtCari.getText() + "%' " +
              "OR nohp LIKE '%" + txtCari.getText() + "%' " +
              "OR tgl_plg LIKE '%" + txtCari.getText() + "%'";
                ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {                    
                    tbltampil.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6),
                     rs.getString(7)
                });
                    tblLaporan.setModel(tbltampil);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (cbLaporan.getSelectedItem().toString().equals("Data Barang")) {
            DefaultTableModel tbltampil = new DefaultTableModel();
            
            tbltampil.addColumn("Kode Barang");
            tbltampil.addColumn("Nama Barang");
            tbltampil.addColumn("Harga Beli");
            tbltampil.addColumn("Harga Jual");
            tbltampil.addColumn("Stok");
            tbltampil.addColumn("Saham");
            
            try {
                Connection c = ClassDatabase.getkoneksi();
                Statement s = c.createStatement();
                String sql = "SELECT * FROM master WHERE kode_barang LIKE '%" + txtCari.getText() + "%' " +
              "OR nama LIKE '%" + txtCari.getText() + "%' " +
              "OR harga_beli LIKE '%" + txtCari.getText() + "%' " +
              "OR harga_jual LIKE '%" + txtCari.getText() + "%' " +
              "OR stok LIKE '%" + txtCari.getText() + "%' " +
              "OR saham LIKE '%" + txtCari.getText() + "%'";
                
                ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {                    
                    tbltampil.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6)
                });
                }
                tblLaporan.setModel(tbltampil);
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (cbLaporan.getSelectedItem().toString().equals("Data Supplier")) {
            DefaultTableModel tbltampil = new DefaultTableModel();
            
            tbltampil.addColumn("Kode Supplier");
            tbltampil.addColumn("Nama");
            tbltampil.addColumn("Alamat");
            tbltampil.addColumn("No. Telp");
            
            try {
                Connection c = ClassDatabase.getkoneksi();
                Statement s = c.createStatement();
                String sql = "SELECT * FROM supplier WHERE kode_supplier LIKE '%" + txtCari.getText() + "%' " +
              "OR nama LIKE '%" + txtCari.getText() + "%' " +
              "OR alamat LIKE '%" + txtCari.getText() + "%' " +
              "OR notelp LIKE '%" + txtCari.getText() + "%'";
                
                ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {                    
                    tbltampil.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4)
                });
                }
                tblLaporan.setModel(tbltampil);
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (cbLaporan.getSelectedItem().toString().equals("Data Penjualan Barang")) {
            DefaultTableModel tbltampil = new DefaultTableModel();
            
            tbltampil.addColumn("ID");
            tbltampil.addColumn("Kode Penjualan");
            tbltampil.addColumn("Jumlah Beli");
            tbltampil.addColumn("Total");
            tbltampil.addColumn("Tanggal Penjualan");
            tbltampil.addColumn("Profit");
           
            try {
                Connection c = ClassDatabase.getkoneksi();
                Statement s = c.createStatement();
                String sql = "SELECT * FROM penjualan WHERE kode_supplier LIKE '%" + txtCari.getText() + "%' " +
                "OR kodea LIKE '%" + txtCari.getText() + "%'";
                
                ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {                    
                    tbltampil.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6)
                });
                }
                tblLaporan.setModel(tbltampil);
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (cbLaporan.getSelectedItem().toString().equals("Data Pembelian Barang")) {
            DefaultTableModel tbltampil = new DefaultTableModel();
            
            tbltampil.addColumn("ID");
            tbltampil.addColumn("No. Pembelian");
            tbltampil.addColumn("Kode Barang");
            tbltampil.addColumn("Jumlah Beli");
            tbltampil.addColumn("Tanggal Beli");
            tbltampil.addColumn("Kode Supplier");
            
            try {
                Connection c = ClassDatabase.getkoneksi();
                Statement s = c.createStatement();
                String sql = "SELECT * FROM acc WHERE no_beli LIKE '%" + txtCari.getText() + "%' " +
                 "OR kodea LIKE '%" + txtCari.getText() + "%'";
                ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {                    
                    tbltampil.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6)
                });
                }
                tblLaporan.setModel(tbltampil);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_btnCariActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnPrint;
    private javax.swing.JComboBox<String> cbLaporan;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblLaporan;
    private com.toedter.calendar.JDateChooser tgl_akhir;
    private com.toedter.calendar.JDateChooser tgl_awal;
    private javax.swing.JTextField txtCari;
    // End of variables declaration//GEN-END:variables
}
